import paramiko
import os
import logging
import sys

# ==== CONFIGURATION ====
USERNAME = "posuser"
PASSWORD = "till@123"
LOCAL_FOLDER = r"C:\Source\ETPStoreFrontV5.5"
REMOTE_TEMP_FOLDER = "/home/posuser/ETPStoreFrontV5.5"
REMOTE_DEST_FOLDER = "/home/posuser/ETPSuite"
LOG_FILE = "master_deployment_log.log"
STORES_FILE = "stores.txt" # The list of your stores

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] - %(message)s",
    handlers=[logging.FileHandler(LOG_FILE), logging.StreamHandler(sys.stdout)]
)

def ssh_connect(ip):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(ip, username=USERNAME, password=PASSWORD, timeout=10)
        return client
    except Exception as e:
        logging.error(f"‚ùå Failed to connect to {ip}: {e}")
        return None

def run_command(client, command, ignore_errors=False):
    stdin, stdout, stderr = client.exec_command(command)
    exit_status = stdout.channel.recv_exit_status()
    if exit_status != 0 and not ignore_errors:
        error = stderr.read().decode().strip()
        logging.error(f"Command failed: {command}\nError: {error}")
        return None
    return stdout.read().decode().strip()

def upload_directory(sftp, local_dir, remote_dir):
    try: sftp.stat(remote_dir)
    except FileNotFoundError: sftp.mkdir(remote_dir)
    for item in os.listdir(local_dir):
        local_path = os.path.join(local_dir, item).replace("\\", "/")
        remote_path = f"{remote_dir}/{item}"
        if os.path.isdir(local_path):
            upload_directory(sftp, local_path, remote_path)
        else:
            sftp.put(local_path, remote_path)

def setup_keys_for_store(store_tills):
    source_till_ip = store_tills[0]
    logging.info(f"üîë Performing one-time key setup for store {source_till_ip}...")
    source_client = ssh_connect(source_till_ip)
    if not source_client: return False

    keygen_command = 'ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""'
    run_command(source_client, "mkdir -p ~/.ssh")
    run_command(source_client, keygen_command)
    public_key = run_command(source_client, "cat ~/.ssh/id_rsa.pub")
    source_client.close()

    if not public_key:
        logging.error("‚ùå Could not generate or read public key. Setup failed.")
        return False

    for till_ip in store_tills:
        target_client = ssh_connect(till_ip)
        if target_client:
            auth_command = (
                f"mkdir -p ~/.ssh && "
                f"echo '{public_key}' >> ~/.ssh/authorized_keys && "
                f"chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"
            )
            run_command(target_client, auth_command)
            target_client.close()
    logging.info("‚úÖ Key setup complete for this store.")
    return True

def deploy_to_store(store_tills):
    source_till_ip = store_tills[0]
    logging.info(f"üöö Starting deployment for store {source_till_ip}...")
    
    # === Check if keys are set up, if not, do the one-time setup ===
    source_client_check = ssh_connect(source_till_ip)
    if not source_client_check: return False
    
    # Command to test passwordless login from Till 1 to itself. If it fails, keys are needed.
    test_cmd = f"ssh -o PasswordAuthentication=no -o BatchMode=yes {USERNAME}@{source_till_ip} 'echo success'"
    result = run_command(source_client_check, test_cmd, ignore_errors=True)
    source_client_check.close()

    if "success" not in result:
        logging.warning("Passwordless SSH not configured. Running setup...")
        if not setup_keys_for_store(store_tills):
            logging.error("Key setup failed. Aborting deployment for this store.")
            return False
    else:
        logging.info("‚úÖ Passwordless SSH is already configured.")
        
    # === Proceed with Deployment ===
    source_client = ssh_connect(source_till_ip)
    if not source_client: return False
    
    # 1. Upload from PC to Till 1
    try:
        logging.info("  Uploading files from PC to Till 1...")
        source_client.exec_command(f"rm -rf {REMOTE_TEMP_FOLDER}")
        sftp = source_client.open_sftp()
        upload_directory(sftp, LOCAL_FOLDER, REMOTE_TEMP_FOLDER)
        sftp.close()
    except Exception as e:
        logging.error(f"  Upload to Till 1 failed: {e}")
        source_client.close()
        return False

    # 2. Distribute from Till 1 to all its local tills
    logging.info("  Distributing files from Till 1 to other tills in the store...")
    for till_ip in store_tills:
        cmd = (
            f"ssh -o StrictHostKeyChecking=no {USERNAME}@{till_ip} 'rm -rf {REMOTE_DEST_FOLDER}' && "
            f"scp -o StrictHostKeyChecking=no -r {REMOTE_TEMP_FOLDER} {USERNAME}@{till_ip}:{REMOTE_DEST_FOLDER}"
        )
        run_command(source_client, cmd)
    
    source_client.exec_command(f"rm -rf {REMOTE_TEMP_FOLDER}") # Cleanup
    source_client.close()
    logging.info(f"‚úÖ Deployment complete for store {source_till_ip}.")
    return True

# --- Main Execution ---
if __name__ == "__main__":
    if not os.path.exists(STORES_FILE):
        logging.critical(f"‚ùå Stores list file not found: '{STORES_FILE}'")
        sys.exit(1)

    stores_to_process = []
    with open(STORES_FILE, 'r') as f:
        for line in f:
            if line.strip() and not line.startswith('#'):
                parts = line.strip().split()
                stores_to_process.append((parts[0], int(parts[1])))

    failed_stores = []
    for start_ip, num_tills in stores_to_process:
        ip_parts = start_ip.split('.')
        base_ip = ".".join(ip_parts[:3])
        start_octet = int(ip_parts[3])
        
        current_store_tills = [f"{base_ip}.{start_octet + i}" for i in range(num_tills)]
        
        logging.info(f"\n{'='*20} PROCESSING STORE: {start_ip} {'='*20}")
        if not deploy_to_store(current_store_tills):
            failed_stores.append(start_ip)

    logging.info(f"\n{'='*25} FINAL SUMMARY {'='*25}")
    if not failed_stores:
        logging.info("‚úÖ All stores were processed successfully!")
    else:
        logging.warning(f"‚ö†Ô∏è Deployment failed for the following stores: {', '.join(failed_stores)}")
